// Generated by CoffeeScript 1.3.3

describe('IChingEngine', function() {
  var hexagramsinfo, hn, i, ichingengine, imagemap, inf, ov;
  hexagramsinfo = (function() {
    var _i, _results;
    _results = [];
    for (i = _i = 0; _i < 64; i = ++_i) {
      hn = ("0" + (i + 1)).slice(-2);
      ov = ("0" + i).slice(-2);
      inf = {
        hexagramnumber: hn,
        octalvalue: ov,
        hexagramname: "hexagramname:" + ov,
        hexagramaliasname: "hexagramaliasname:" + ov,
        hexagramaliasenglishname: "hexagramaliasenglishname:" + ov,
        hexagramimage: "hexagramimage:" + ov,
        hexagramalllinedescription: "hexagramalllinedescription:" + ov,
        hexagramalllineexplanation: "hexagramalllineexplanation:" + ov,
        hexagramalllinetranscription: "hexagramalllinetranscription:" + ov,
        hexagramdescription: "hexagramdescription:" + ov,
        hexagramexplanation: "hexagramexplanation:" + ov,
        hexagramtranscription: "hexagramtranscription:" + ov,
        hexagramfirstlinedescription: "hexagramfirstlinedescription:" + ov,
        hexagramfirstlineexplanation: "hexagramfirstlineexplanation:" + ov,
        hexagramfirstlinetranscription: "hexagramfirstlinetranscription:" + ov,
        hexagramsecondlinedescription: "hexagramsecondlinedescription:" + ov,
        hexagramsecondlineexplanation: "hexagramsecondlineexplanation:" + ov,
        hexagramsecondlinetranscription: "hexagramsecondlinetranscription:" + ov,
        hexagramthirdlinedescription: "hexagramthirdlinedescription:" + ov,
        hexagramthirdlineexplanation: "hexagramthirdlineexplanation:" + ov,
        hexagramthirdlinetranscription: "hexagramthirdlinetranscription:" + ov,
        hexagramforthlinedescription: "hexagramforthlinedescription:" + ov,
        hexagramforthlineexplanation: "hexagramforthlineexplanation:" + ov,
        hexagramforthlinetranscription: "hexagramforthlinetranscription:" + ov,
        hexagramfifthlinedescription: "hexagramfifthlinedescription:" + ov,
        hexagramfifthlineexplanation: "hexagramfifthlineexplanation:" + ov,
        hexagramfifthlinetranscription: "hexagramfifthlinetranscription:" + ov,
        hexagramsixthlinedescription: "hexagramsixthlinedescription:" + ov,
        hexagramsixthlineexplanation: "hexagramsixthlineexplanation:" + ov,
        hexagramsixthlinetranscription: "hexagramsixthlinetranscription:" + ov
      };
      _results.push(inf);
    }
    return _results;
  })();
  imagemap = {
    kou: {
      images: {
        oldyin: "oldyin:" + "kou",
        youngyang: "youngyang:" + "kou",
        youngyin: "youngyin:" + "kou",
        oldyang: "oldyang:" + "kou"
      }
    },
    sangi: {
      images: {
        oldyin: "oldyin:" + "sangi",
        youngyang: "youngyang:" + "sangi",
        youngyin: "youngyin:" + "sangi",
        oldyang: "oldyang:" + "sangi"
      }
    }
  };
  ichingengine = null;
  beforeEach(function() {
    return ichingengine = new IChingEngine(hexagramsinfo, imagemap);
  });
  afterEach(function() {
    return ichingengine = null;
  });
  it('const 値のチェック', function() {
    expect(IChingEngine.OldYin).to.be(6);
    expect(IChingEngine.YoungYang).to.be(7);
    expect(IChingEngine.YoungYin).to.be(8);
    expect(IChingEngine.OldYang).to.be(9);
    expect(IChingEngine.OldYangBitCount).to.be(0);
    expect(IChingEngine.YoungYinBitCount).to.be(1);
    expect(IChingEngine.YoungYangBitCount).to.be(2);
    expect(IChingEngine.OldYinBitCount).to.be(3);
    expect(IChingEngine.CoinsCastingRandomMax).to.be(8);
    expect(IChingEngine.KouLines).to.be(6);
  });
  it('#bitCount', function() {
    var bit, bitcountresult, _fn, _i, _len;
    bitcountresult = [0, 1, 1, 2, 1, 2, 2, 3, 1];
    _fn = function(bit, i) {
      return expect(ichingengine.bitCount(i)).to.be(bit);
    };
    for (i = _i = 0, _len = bitcountresult.length; _i < _len; i = ++_i) {
      bit = bitcountresult[i];
      _fn(bit, i);
    }
  });
  it('#coinsCasting normal', function() {
    var coinscastingresult, randomback, randomvalues, rnd, _fn, _i, _len;
    randomvalues = [
      function() {
        return 0.0;
      }, function() {
        return 0.2;
      }, function() {
        return 0.3;
      }, function() {
        return 0.4;
      }, function() {
        return 0.5;
      }, function() {
        return 0.7;
      }, function() {
        return 0.8;
      }, function() {
        return 0.9;
      }
    ];
    randomback = Math.random;
    coinscastingresult = [9, 8, 8, 7, 8, 7, 7, 6];
    _fn = function(rnd, i) {
      Math.random = rnd;
      return expect(ichingengine.coinsCasting()).to.be(coinscastingresult[i]);
    };
    for (i = _i = 0, _len = randomvalues.length; _i < _len; i = ++_i) {
      rnd = randomvalues[i];
      _fn(rnd, i);
    }
    Math.random = randomback;
  });
  it('#coinsCasting illegal', function() {
    var bitcountbak;
    bitcountbak = ichingengine.bitCount;
    ichingengine.bitCount = function(i) {
      return 10;
    };
    expect(ichingengine.coinsCasting()).to.be(0);
    ichingengine.bitCount = bitcountbak;
  });
  it('#generateKous', function() {
    var kou, _fn, _i, _len, _ref;
    expect(ichingengine.generateKous()).to.have.length(IChingEngine.KouLines);
    _ref = ichingengine.generateKous();
    _fn = function(kou) {
      return expect(kou).to.be.within(IChingEngine.OldYin, IChingEngine.OldYang);
    };
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      kou = _ref[_i];
      _fn(kou);
    }
  });
  it('#kousToHexagrams', function() {
    var hexagramsresult, hexr, kous, kousdata, _fn, _i, _len;
    kousdata = [[6, 6, 6, 6, 6, 6], [9, 9, 9, 9, 9, 9], [6, 9, 6, 9, 6, 9], [7, 8, 7, 8, 7, 8]];
    hexagramsresult = [
      {
        hexagramsmainresult: 0,
        hexagramsperspectiveresult: 63
      }, {
        hexagramsmainresult: 63,
        hexagramsperspectiveresult: 0
      }, {
        hexagramsmainresult: 21,
        hexagramsperspectiveresult: 42
      }, {
        hexagramsmainresult: 42
      }
    ];
    _fn = function(kous, hexr) {
      return expect(ichingengine.kousToHexagrams(kous)).to.eql(hexr);
    };
    for (i = _i = 0, _len = kousdata.length; _i < _len; i = ++_i) {
      kous = kousdata[i];
      hexr = hexagramsresult[i];
      _fn(kous, hexr);
    }
  });
  it('#kouToKString', function() {
    var code, codes, results, _fn, _i, _len;
    codes = [6, 7, 8, 9, 5];
    results = ["老陰", "少陽", "少陰", "老陽", ""];
    _fn = function(code, i) {
      return expect(ichingengine.kouToKString(code)).to.be(results[i]);
    };
    for (i = _i = 0, _len = codes.length; _i < _len; i = ++_i) {
      code = codes[i];
      _fn(code, i);
    }
  });
  it('#kouToEString', function() {
    var code, codes, results, _fn, _i, _len;
    codes = [6, 7, 8, 9, 5];
    results = ["OldYin", "YoungYang", "YoungYin", "OldYang", ""];
    _fn = function(code, i) {
      return expect(ichingengine.kouToEString(code)).to.be(results[i]);
    };
    for (i = _i = 0, _len = codes.length; _i < _len; i = ++_i) {
      code = codes[i];
      _fn(code, i);
    }
  });
  it('#kouToKouImage', function() {
    var code, codes, results, _fn, _i, _len;
    codes = [6, 7, 8, 9];
    results = ["oldyin:kou", "youngyang:kou", "youngyin:kou", "oldyang:kou"];
    _fn = function(code, i) {
      return expect(ichingengine.kouToKouImage(code)).to.be(results[i]);
    };
    for (i = _i = 0, _len = codes.length; _i < _len; i = ++_i) {
      code = codes[i];
      _fn(code, i);
    }
    expect(ichingengine.kouToKouImage(0)).to.be(null);
  });
  it('#kouToSangiImage', function() {
    var code, codes, results, _fn, _i, _len;
    codes = [6, 7, 8, 9];
    results = ["oldyin:sangi", "youngyang:sangi", "youngyin:sangi", "oldyang:sangi"];
    _fn = function(code, i) {
      return expect(ichingengine.kouToSangiImage(code)).to.be(results[i]);
    };
    for (i = _i = 0, _len = codes.length; _i < _len; i = ++_i) {
      code = codes[i];
      _fn(code, i);
    }
    expect(ichingengine.kouToSangiImage(0)).to.be(null);
  });
  it('#reading with perspective', function() {
    var genkousbak, info, key, kousresult, mainresult, perspectiveresult, result, selectkey, value, _fn, _i, _len, _ref;
    genkousbak = ichingengine.generateKous;
    ichingengine.generateKous = function() {
      return [6, 6, 6, 6, 6, 6];
    };
    kousresult = [
      {
        koucode: 6,
        kousangiimage: "oldyin:sangi",
        kousymbolimage: "oldyin:kou",
        kousymbolname: "老陰",
        kousymbolenglishname: "OldYin"
      }, {
        koucode: 6,
        kousangiimage: "oldyin:sangi",
        kousymbolimage: "oldyin:kou",
        kousymbolname: "老陰",
        kousymbolenglishname: "OldYin"
      }, {
        koucode: 6,
        kousangiimage: "oldyin:sangi",
        kousymbolimage: "oldyin:kou",
        kousymbolname: "老陰",
        kousymbolenglishname: "OldYin"
      }, {
        koucode: 6,
        kousangiimage: "oldyin:sangi",
        kousymbolimage: "oldyin:kou",
        kousymbolname: "老陰",
        kousymbolenglishname: "OldYin"
      }, {
        koucode: 6,
        kousangiimage: "oldyin:sangi",
        kousymbolimage: "oldyin:kou",
        kousymbolname: "老陰",
        kousymbolenglishname: "OldYin"
      }, {
        koucode: 6,
        kousangiimage: "oldyin:sangi",
        kousymbolimage: "oldyin:kou",
        kousymbolname: "老陰",
        kousymbolenglishname: "OldYin"
      }
    ];
    mainresult = {
      resultkind: "main"
    };
    _ref = hexagramsinfo[0];
    for (key in _ref) {
      value = _ref[key];
      mainresult[key] = value;
    }
    selectkey = ["hexagramnumber", "octalvalue", "hexagramname", "hexagramaliasname", "hexagramaliasenglishname", "hexagramimage"];
    perspectiveresult = {
      resultkind: "perspective"
    };
    info = hexagramsinfo[63];
    _fn = function(key) {
      return perspectiveresult[key] = info[key];
    };
    for (_i = 0, _len = selectkey.length; _i < _len; _i++) {
      key = selectkey[_i];
      _fn(key);
    }
    result = {
      kousresult: kousresult,
      mainresult: mainresult,
      perspectiveresult: perspectiveresult
    };
    expect(ichingengine.reading()).to.eql(result);
    ichingengine.generateKous = genkousbak;
  });
  return it('#reading without perspective', function() {
    var genkousbak, key, kousresult, mainresult, res, result, results, value, _ref;
    genkousbak = ichingengine.generateKous;
    ichingengine.generateKous = function() {
      return [7, 8, 7, 8, 7, 8];
    };
    results = ["老陰", "少陽", "少陰", "老陽", ""];
    kousresult = [
      {
        koucode: 7,
        kousangiimage: "youngyang:sangi",
        kousymbolimage: "youngyang:kou",
        kousymbolname: "少陽",
        kousymbolenglishname: "YoungYang"
      }, {
        koucode: 8,
        kousangiimage: "youngyin:sangi",
        kousymbolimage: "youngyin:kou",
        kousymbolname: "少陰",
        kousymbolenglishname: "YoungYin"
      }, {
        koucode: 7,
        kousangiimage: "youngyang:sangi",
        kousymbolimage: "youngyang:kou",
        kousymbolname: "少陽",
        kousymbolenglishname: "YoungYang"
      }, {
        koucode: 8,
        kousangiimage: "youngyin:sangi",
        kousymbolimage: "youngyin:kou",
        kousymbolname: "少陰",
        kousymbolenglishname: "YoungYin"
      }, {
        koucode: 7,
        kousangiimage: "youngyang:sangi",
        kousymbolimage: "youngyang:kou",
        kousymbolname: "少陽",
        kousymbolenglishname: "YoungYang"
      }, {
        koucode: 8,
        kousangiimage: "youngyin:sangi",
        kousymbolimage: "youngyin:kou",
        kousymbolname: "少陰",
        kousymbolenglishname: "YoungYin"
      }
    ];
    mainresult = {
      resultkind: "main"
    };
    _ref = hexagramsinfo[42];
    for (key in _ref) {
      value = _ref[key];
      mainresult[key] = value;
    }
    result = {
      kousresult: kousresult,
      mainresult: mainresult
    };
    res = ichingengine.reading();
    expect(res).to.eql(result);
    expect('perspectiveresult' in res).not.to.be.ok;
    ichingengine.generateKous = genkousbak;
  });
});
